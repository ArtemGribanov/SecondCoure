Первая
#include <iostream>
#include <utility>
#include <vector>
#include <algorithm>

typedef std::pair <int, int> Segment;

bool my_pair_sort(Segment s1, Segment s2)  {
  return (s1.second < s2.second);
}

std::vector <int> get_covering_set(std::vector <Segment> segments) {
  std::vector <int> result;
  std::sort(segments.begin(), segments.end(), my_pair_sort);
  int cur_dot = 0;
  for (std::size_t i = 0; i < segments.size(); i++) {
    cur_dot = segments[i].second;
    result.push_back(cur_dot);
    
    while (i < segments.size() && segments[i+1].first <= cur_dot) {
      i++;
    }
  }

  return result;
}

int main(void) {
  int segments_count;
  std::cin >> segments_count;
  std::vector <Segment> segments(segments_count);
  for (int i = 0; i < segments_count; i++) {
    std::cin >> segments[i].first >> segments[i].second;
  }

  std::vector <int> points = get_covering_set(segments);
  std::cout << points.size() << std::endl;
  for (std::size_t i = 0; i < points.size(); i++) {
    std::cout << points[i] << " ";
  }
  std::cout << std::endl;
}
Вторая
#include <bits/stdc++.h>
using namespace std;
#define f first
#define s second
int main()
{
     ios::sync_with_stdio(0);
     cin.tie(0);
     int n, i, W;
     cin>>n>>W;
     vector<pair<double, pair<double, double>>> p(n);
     double c,w, ans=0;
     for(i=0; i<n; i++)
        {
            cin>>c>>w;
            p[i].f=c/w;
            p[i].s.f=c;
            p[i].s.s=w;
        }
     sort(p.begin(), p.end());
     for(i=n-1; i>=0; i--)
         if(W>p[i].s.s)
         {
             ans+=p[i].s.f;
             W-=p[i].s.s;
         }
         else
         {
             ans+=p[i].f*W;
             break;
         }
     cout << fixed << setprecision(3)<<ans;

}
Третья
#include <iostream>
#include <vector>

int main(void) {
  int number;
  std::vector<int> ints;
  std::cin >> number;
  int step = 1;
  while (number > step * 2) {
    ints.push_back(step);
    number -= step;
    step++;
  }
  ints.push_back(number);

  std::cout << step << std::endl;
  for (auto & item : ints) {
    std::cout << item << ' ';
  }
}
Коды Хаффмана
Первая
#include <algorithm>
#include <cassert>
#include <cstddef>
#include <iostream>
#include <string>
#include <tuple>
#include <unordered_map>
#include <vector>
#include <queue>

class Huffman{
    struct CharSetFrequency{
        std::string char_set;
        int frequency;

        bool operator < (const CharSetFrequency &other) const {
            return std::tie(frequency, char_set) > std::tie(other.frequency, other.char_set);
        }
    };

public:
    static std::unordered_map<char, std::string> encode(const std::string &text);
    static std::string decode(const std::string &text, const std::unordered_map<char, std::string> &huffman_encoding);
};

std::unordered_map<char, std::string> Huffman::encode(const std::string &text){
    std::unordered_map<char, int> char_frequencies;
    for(auto c:text){
        char_frequencies[c]++;
    }

    std::vector<CharSetFrequency> frequencies;
    for(auto char_frequency:char_frequencies){
        frequencies.push_back({std::string(1,char_frequency.first), char_frequency.second});
    }

    if(frequencies.size() == 1){
        std::unordered_map<char, std::string> result;
        result[frequencies[0].char_set[0]] = "0";
        return result;
    }

    std::unordered_map<char, std::string> result;
    std::priority_queue<CharSetFrequency> q(frequencies.begin(), frequencies.end());
    while(q.size()>=2){
        auto first = q.top();
        q.pop();
        auto second = q.top();
        q.pop();

        for(auto c:first.char_set){
            result[c] = "0" + result[c];
        }

        for(auto c:second.char_set){
            result[c] = "1" + result[c];
        }

        q.push({first.char_set + second.char_set, first.frequency + second.frequency});
    }
    return result;
}

std::string Huffman::decode(const std::string &text, const std::unordered_map<char, std::string> &huffman_encoding){
    size_t len = text.size();
    size_t pos = 0;
    std::string result;
    while(pos < len){
        for(auto &encoded:huffman_encoding){
            if(text.substr(pos, encoded.second.size()) == encoded.second){
                result += encoded.first;
                pos += encoded.second.size();
                break;
            }
        }
    }
    return result;
}

int main(){
    std::string text;
    std::cin >> text;

    auto huffman_encoding = Huffman::encode(text);

    std::string encoded_text;
    for(auto c:text){
        encoded_text += huffman_encoding[c];
    }
    std::cout << huffman_encoding.size() << " " << encoded_text.size() << std::endl;
    for(auto &encoded : huffman_encoding){
        std::cout << encoded.first << ": " << encoded.second << std::endl;
    }
    std::cout << encoded_text << std::endl;
}
Вторая
#include <iostream>
#include <map>
#include <string>

int main() {
    int k, m;
    std::cin >> k >> m;
    std::map<std::string, char> dict;
    for(int i = 0; i < k; ++i)
    {
        std::string tmp1, tmp2;
        std::cin >> tmp1 >> tmp2;
        dict[tmp2] = tmp1[0];
    }
    std::string in;
    std::cin >> in;
    std::string tmp = "";
    for(int i = 0; i < m; ++i)
    {
        tmp += in[i];
        if(dict.find(tmp) != dict.end())
        {
            std::cout << dict[tmp];
            tmp = "";
        }
    }
    return 0;
}
Очереди с приорететами
Единственная
#include <bits/stdc++.h>
using namespace std;

struct Heap {
    void siftup (int i) {
        while (i > 0 && a[i/2] < a[i]) {
            swap(a[i], a[i/2]);
            i /= 2;
        }
    }
    void insert (int v) {
        n++;
        a[n] = v;
        siftup(n);
    }
    void siftdown (int i) {
        while (2*i <= n) {
            int j = i;
            if (a[2*i] > a[j]) j = 2*i;
            if (2*i+1 <= n && a[2*i+1] > a[j]) j = 2*i+1;
            if (j == i) break;
            swap(a[i], a[j]);
            i = j;
        }
    }
    int ex_max() {
        int ex_m = a[0];
        a[0] = a[n];
        n--;
        siftdown(0);
        return ex_m;
    }
    int a[100000];
    int n = -1; //размер кучи
};

int main() {
    Heap h;
    int n, num;
    string s;
    cin >> n;
    for (int i = 0; i < n; i++){
      cin >> s; 
      if (s == "Insert"){
        cin >> num;
        h.insert(num);
      }
      else cout << h.ex_max() << endl;
    }
    return 0;
} 
